{"version":3,"sources":["components/ControlledEditor.js","hooks/useLocalStorage.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["ControlledEditor","props","value","language","displayName","setValue","className","options","mode","theme","lineNumbers","lineWrapping","lint","onBeforeChange","editor","data","useLocalStorage","key","initialValue","useState","item","localStorage","getItem","JSON","parse","error","_value","_setValue","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","useEffect","class","title","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a195eab2.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/xml/xml\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/mode/css/css\";\r\n\r\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\r\n\r\nconst ControlledEditor = (props) => {\r\n\r\n  const {value, language, displayName, setValue} = props\r\n\r\n  const handleChange = (editor, data, value) => {\r\n    setValue(value)\r\n  }\r\n\r\n  return (  \r\n    <div className=\"code-container\">\r\n        <div className=\"code-title\">{displayName}</div>\r\n        <CodeMirror\r\n          value={value}\r\n          options={{\r\n            mode: language,\r\n            theme: \"material\",\r\n            lineNumbers: true,\r\n            lineWrapping: true,\r\n            lint: true,\r\n          }}\r\n          onBeforeChange={handleChange}\r\n        />\r\n      </div>\r\n  );\r\n}\r\n \r\nexport default ControlledEditor;","import React, { useState } from 'react';\r\n\r\nconst useLocalStorage = (key,initialValue) => {\r\n  \r\n  const [_value,_setValue] = useState(() => {\r\n    try {\r\n      const item = localStorage.getItem(key)\r\n      return item ? JSON.parse(item) : initialValue\r\n    } catch (error) {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  const setValue = (value) => {\r\n    try {\r\n      _setValue(value)\r\n      localStorage.setItem(key,JSON.stringify(value))\r\n    } catch (error) {\r\n      \r\n    }\r\n  }\r\n\r\n  return [\r\n    _value,\r\n    setValue\r\n  ]\r\n\r\n}\r\n \r\nexport default useLocalStorage;","import React, { useState, useEffect } from \"react\";\nimport ControlledEditor from \"./components/ControlledEditor\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\n\nfunction App() {\n  const [html, setHtml] = useLocalStorage(\"html\",\"\");\n  const [css, setCss] = useLocalStorage(\"css\",\"\");\n  const [js, setJs] = useLocalStorage(\"js\",\"\");\n  const [srcDoc, setSrcDoc] = useState(\"\")\n\n  useEffect(() => {\n    setSrcDoc(`\n      <html>${html}</html>\n      <style>${css}</style>\n      <script>${js}</script>\n    `);\n  }, [html, css, js]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"editors-container\">\n        <ControlledEditor\n          value={html}\n          language=\"xml\"\n          displayName=\"html\"\n          setValue={setHtml}\n        />\n        <ControlledEditor\n          value={css}\n          language=\"css\"\n          displayName=\"css\"\n          setValue={setCss}\n        />\n        <ControlledEditor\n          value={js}\n          language=\"javascript\"\n          displayName=\"javascript\"\n          setValue={setJs}\n        />\n      </div>\n      <div class=\"iframe-container\">\n        <iframe title=\"output web\" srcDoc={srcDoc} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}